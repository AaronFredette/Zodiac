---
ID: "7c90caed-3841-4f6f-87f8-5a5763f7ee69"
Parent: "d03a7c5a-f775-42c4-b60e-1028572b0b31"
Template: "6f2ca05f-7c8a-4a57-bf4d-c3bd4c75fb9c"
Path: "/sitecore/content/Zodiac/ZodiacManual/home/rendering-tutorials/your-first-rendering/_subcontent/Project View Code"
DB: master
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "001dd393-96c5-490b-924a-b0f25cd9efd8"
      Hint: __Lock
      Value: <r />
    - ID: "1ff65e88-22e7-4bb7-ac61-3dfecad95378"
      Hint: Code Text
      Value: |
        @inherits Constellation.Foundation.Mvc.EditorCompatibleView<Feature.Content.Models.CallToActionCardModel>
        
        <div class="card">
        	
        	<picture>
        		<source media="(min-width: 576px)" srcset="@Model.ImageHeader.GetCustomHeightImageSrc(285)" />
        		<source media="(min-width: 676px)" srcset="@Model.ImageHeader.GetCustomHeightImageSrc(387)" />
        		<source media="(min-width: 992px)" srcset="@Model.ImageHeader.GetCustomHeightImageSrc(161)" />
        		<source media="(min-width: 1200px)" srcset="@Model.ImageHeader.GetCustomHeightImageSrc(195)" />
        		<img class="card-img-top" src="@Model.ImageHeader.GetCustomHeightImageSrc(195)" alt="@Model.ImageHeader.Alt" />
        	</picture>
        	<div class="card-body">
        		<h5 class="card-title">@Model.Heading</h5>
        		<div class="card-text">@Model.CardText</div>
        
        		@if (IsEditing || !string.IsNullOrEmpty(Model.ButtonLink.Url))
        		{
        			<a href="@Model.ButtonLink.Url" target="@Model.ButtonLink.Target" class="btn btn-primary">@Model.ButtonLink.Text</a>
        		}
        
        	</div>
        </div>
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20200930T161654Z
    - ID: "2b1180a9-ae15-4fa5-bac0-0657f91e3d03"
      Hint: Header Text
      Value: "<p>The ZodiacManual website uses Bootstrap 4.5 as an HTML framework. Your websites may use a different framework, or 100% custom HTML. our Feature View was necessarily generic to allow you to customize it to fit the majority of your Sitecore installation's websites. However, to make this Call to Action Card work correctly in Zodiac, we need to generate some very specific HTML:</p>"
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "618c0ccc-1298-46ed-8e16-b10bce8b1742"
    - ID: "b594de98-237f-4066-b26d-b73949c78345"
      Hint: Heading
      Value: Project View Code
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\rcabral
    - ID: "c8f2152f-c43b-4ca7-be84-68ba46b70b83"
      Hint: Footer Text
      Value: |
        <p>We've chosen to create a Responsive image on this card to demonstrate a key function of the ImageModel object that ships with ModelMapper. The <strong>GetCustomHeightImageSrc()</strong> Method (and its siblings) allow your View to request a different <strong>MediaItem</strong> Url from Sitecore without having to invoke key Sitecore API objects. This keeps code legible and ensures that your programmers are not violating context language, database, search index, or security rules in their code, a #1 source of runtime errors.</p>
        <p>To demonstrate how to write ExperienceEditor friendly Views, our <strong>ZodiacManual </strong>View makes the <strong>ButtonLink </strong>property optional - the button only appears on the published site if a URL has been set by the Content Author. We use the <strong>IsEditing </strong>check to ensure that the button is always visible when necessary in Experience Editor.</p>
        <p>Note that on the Feature View, we chose to use <strong>Model.ButtonLink.Rendered</strong> to have Sitecore's <strong>FieldRenderer </strong>produce the HTML for the &lt;a/&gt; element. Here we are specifically controlling the markup by accessing the <strong>GeneralLinkModel</strong>'s properties individually. The need to do this depends upon a balance of Experience Editor support needs and the fragility/consistency of your HTML. Here we need to add a CSS Class to the anchor element, something that the default Feature View does not have and should not know about.&nbsp;</p>
        <p>Note that if you choose to weld down your HTML for <strong>ImageModels </strong>and <strong>GeneralLinkModels </strong>as we've done here, you are responsible for providing Custom Experience Buttons for the Rendering to allow content authors to manage these fields while in Experience Editor.</p>
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20200930T162918Z
